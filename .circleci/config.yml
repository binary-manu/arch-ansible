# .circleci/config.yml
version: 2.1

executors:
  linux:
    machine: true
    resource_class: binary-manu/linux-builder

commands:

  clean:
    description: >
      Delete all existing VMs left by older jobs
    steps:
      - run: |
          VBoxManage list vms |
          sed 's/.*{\([-[:xdigit:]]\+\)}$/\1/' |
          xargs -I% sh -c "VBoxManage controlvm % poweroff; sleep 3; VBoxManage unregistervm % --delete-all"
      - run: |
          virsh list --all --name |
            xargs -I% sh -c "virsh destroy %; sleep 3; virsh undefine % --remove-all-storage"

  pkgproxy-setup:
    description: Add an Ansible configuration file to use pkgproxy to cache Arch packages
    steps:
      - run: >
          echo 'custom_repos_servers: ["http://10.0.2.2:8080/$repo/os/$arch"]' > ansible/group_vars/all/99-ci-pkgproxy.yaml

  arch-ansible-defaults:
    description: >
      Add Ansible variables to test as much as possible of the playbook,
      including stuff that would be disabled by default in VMs.
    steps:
      - run: |
          echo '
          global_portable_image: true
          bluetooth_override: active
          xfce_user_customizations_kvantum_theme: KvAdaptaDark
          xscreensaver_override: active
          ' > ansible/group_vars/all/90-ci-defaults.yaml

jobs:
  install-media:
    executor: linux
    parameters:
      provider:
        type: string
      disksetup:
        type: string
    steps:
      - checkout
      - clean
      - pkgproxy-setup
      - run:
          name: Select the partitioning flow
          command: >
            echo 'disksetup_roles_prefix:  << parameters.disksetup >>' > ansible/group_vars/all/91-ci-disksetup.yaml
      - run:
          name: Perform a system installation from the Arch Linux install media
          command: |
            cd packer
            ./packer-wrapper.sh build -only=<< parameters.provider >> -timestamp-ui packer-template.json

  vagrant:
    executor: linux
    parameters:
      provider:
        type: string
    steps:
      - checkout
      - clean
      - pkgproxy-setup
      - run:
          name: Bring a vagrant VM up
          command: |
            cd vagrant
            vagrant up --provider << parameters.provider >>

workflows:
  # Test installation from the upstream media. This uses Packer.
  # All partitioning flows should be tested. Since they are identical under every hypervisor,
  # (barring those using UEFIs, which for now are VirtualBox-only), test some under Qemu and
  # some under VirtualHBox.
  install-media:
    jobs:
    - install-media:
        name: install_media-virtualbox_iso-mbr_singlepart
        disksetup: disksetup/mbr_singlepart/
        provider: virtualbox-iso
    - install-media:
        name: install_media-qemu-mbr_lvm
        disksetup: disksetup/mbr_lvm/
        provider: qemu
    - install-media:
        name: install_media-virtualbox_iso-bios_gpt_btrfs
        disksetup: disksetup/bios_gpt_btrfs/
        provider: virtualbox-iso
    - install-media:
        name: install_media-virtualbox_uefi-mbr_singlepart
        disksetup: disksetup/gpt_singlepart/
        provider: virtualbox-uefi
  # Test provisioning of the ArchLinux Vagrant base box.
  vagrant:
    jobs:
    - vagrant:
        name: vagrant-virtualbox
        provider: virtualbox
    - vagrant:
        name: vagrant-libvirt
        provider: libvirt
