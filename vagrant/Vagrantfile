# -*- mode: ruby -*-
# vi: set ft=ruby et sw=2 sts=-1:

require 'etc'

def number_or_zero(s)
  number = s.to_i
  number = 0 if (number.to_s != s)
  return number
end

def vbox_nat_localhost_supported?
  `VBoxManage --help`.include?("--nat-localhostreachableN")
end

# Set audio backend for VirtualBox, host-dependant
enable_audio = nil
http_proxy = nil
default_memory = 1536
default_video_ram = 16
default_cpus = (Etc.nprocessors / 2).ceil()
headless = !ENV["ARCH_ANSIBLE_HEADLESS"].nil? && ENV["ARCH_ANSIBLE_HEADLESS"].length > 0
cpus = number_or_zero(ENV["ARCH_ANSIBLE_CPUS"])
if cpus > 0
  default_cpus = cpus
end
libvirt_user_session = !ENV["ARCH_ANSIBLE_LIBVIRT_USER_SESSION"].nil? && ENV["ARCH_ANSIBLE_LIBVIRT_USER_SESSION"].length > 0

Vagrant.configure("2") do |config|
  config.vm.box = "archlinux/archlinux"

  config.vm.provider "virtualbox" do |vb, override|
    vb.gui = !headless
    vb.default_nic_type = "virtio"
    vb.cpus = default_cpus
    vb.memory = default_memory
    vb.customize [
      "modifyvm", :id,
      "--vram", default_video_ram.to_s,
      "--graphicscontroller", "vmsvga"
    ]

    if vbox_nat_localhost_supported?
      vb.customize [
        "modifyvm", :id,
        "--nat-localhostreachable1", "on"
      ]
    end

    if enable_audio
      vb.customize [
        "modifyvm", :id,
        "--audio", enable_audio,
        "--audioout", "on",
        "--audiocontroller", "ac97"
      ]
    end

    if Vagrant.has_plugin?("vagrant-vbguest")
      override.vbguest.no_install = true
    end

  end

  config.vm.provider "libvirt" do |virt, override|
    virt.uri = libvirt_user_session ? "qemu:///session" : "qemu:///system"
    virt.cpus = default_cpus
    virt.memory = default_memory
    virt.graphics_type = "spice"
    virt.video_type = "virtio"
    virt.video_vram = default_video_ram
    virt.sound_type = "ac97"
    virt.channel :type => 'unix', :target_name => 'org.qemu.guest_agent.0', :target_type => 'virtio'
    virt.channel :type => 'spicevmc', :target_name => 'com.redhat.spice.0', :target_type => 'virtio'

    if libvirt_user_session then
      override.vm.synced_folder "../", "/vagrant", type: "9p"
    end
  end

  if Vagrant.has_plugin?("vagrant-proxyconf") and http_proxy
    config.proxy.http  = http_proxy
    config.proxy.https = http_proxy
  end
  
  config.vm.provision "shell" do |sh|
    sh.privileged = true
    sh.path = "prepare-box-for-arch-ansible.sh"
  end

  config.vm.synced_folder "../", "/vagrant"

  config.vm.provision "ansible_local" do |ansible|
    ansible.install = false
    ansible.compatibility_mode = "2.0"
    ansible.playbook_command = "/tmp/ansible_venv/bin/ansible-playbook"
    ansible.playbook = "site.yaml"
    ansible.config_file = "ansible.cfg"
    ansible.provisioning_path = "/vagrant/ansible"
    ansible.tags = ["mainconfig"]
    ansible.skip_tags = ["reboot"]
    ansible.become = true
    if http_proxy
      ansible.extra_vars = {
        "http_proxy" => http_proxy,
        "https_proxy" => http_proxy
      }
    end
  end

end
